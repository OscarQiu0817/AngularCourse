~~學習~~

20210818 ( 進度 17)

1. Angular 有許多 feature,但要使用他們,需要在
app.module.ts 裡面 import , 並且在下方的 NgModule imports 屬性添加
ex : ngModel 屬性 屬於 FormsModule, 就需引入並添加。

2. main.ts 是主要執行的 ts , 裡面 import 了 AppModule 並啟動。
app.module.ts 裡面的啟動相關項目，指定了 AppComponent。
angular 啟動時去讀取並產生相關 javascript,
是讓 angular 能夠互動響應的主因。


-----------------------------------------------------------------------------------
20210822 ( 進度 50)

1. @NgModule 是 AppModule 的裝飾器
declarations、imports、providers、bootstrap

declaration 有點像是 spring 的 @ComponentScan, 光是定義還不夠，app 不會知道你有這個 component
透過 import 後放在 declaration 裡面，才可以使用到他

imports : 放其他 module 的地方，如果要用到寫好的 module 或是同一個 app 拆分成多個 module 要使用
就要放在這裡。

providers > service 相關

2. @Component , template 是必要的
template vs templateUrl
template    : 允許直接寫 html code
templateUrl : 指向某個 .html 檔案

styleUrls 可指向多個 .css file
styles: [...(css)...] 直接寫在 component.ts 上

selector : 概念類似 css 選擇器  以 app-test 為例子

selector : '<app-test>'  >  <app-test> in html ( 元素 )
selector : '[app-test]'  >  <div app-test> in html ( 屬性 )
selector : '.app-test'   >  <div class="app-test"> in html ( class )

3. data binding
讓 typeScript 和 template 溝通的方式

output data
1. string interpolation ( 插值 ) : {{ data }}
> 最後會轉成 string , 所以也可以寫一些簡單的表示式或呼叫有回傳值的方法 ( 能轉string就可以 )
( 但不能做 if
2. property binding : [property] = "data"

react to (User) events
1. event binding : (event)="expression"
可以傳入 ($event) 取得 事件相關資料，ts function 在 參數位置放上 event:any 來接

two-way-binding ( FormsModule needed !)
1. [(ngModel)] = "data"

4. directives
Dom 的操作說明, 指的是放在這裡的 appTurnGreen ( 範例 )
html : <p appTurnGreen> Receives a green background! </p>
ts :
@Directive({
  selector: '[appTurnGreen]'
})
export class TurnGreenDirective{
  ...
}

Angular 提供之常見 directives : ( 以 * 開頭代表式結構式指令, 會去動到 dom 的結構 )
1. *ngIf :
ts : serverCreated = true;
<p *ngIf="serverCreated ( 或回傳 boolean 的方法 ) "> Server is created ! </p>

用以下方式做到 if/else 顯示元素
<p *ngIf="serverCreated; else noServer "> Server is created ! </p>
<ng-template #noServer>
  <p> No server !</p>
</ng-template>

2. ngStyle : 動態改變元素 style ( attribute directives 不須加* )
搭配 property binding 一起使用傳入 js 物件, 亦可傳入方法
<p [ngStyle]="{backgroundColor:'red'}"> serverTest </p>

3. ngClass : 動態改變元素 class ( attribute directives 不須加* )
搭配 property binding 一起使用傳入 js 物件, 亦可傳入方法
<p [ngClass]="{online: serverStatus === 'online'}"></p>

4. ngFor : 執行迴圈 ( structural directives 須加* )
<p *ngFor="let server of servers"> {{ server.name }} </p>

取得 index
<p *ngFor="let server of servers; let i = index">
  {{ i }}
</p>

5. ng g c component --skipTests true  =>  可以不產生 xxx.spec.ts 測試檔案

-----------------------------------------------------------------------------------
20210823 ( 進度 63 : 大部分在製作畫面 & Component )

1. sourceMap > 讓 browser/main.bundle.js 直接連到對應 .ts 檔案。


-----------------------------------------------------------------------------------
20210824 ( 進度 86 )

1. by default, all properties of components are only accessible inside these components,
not from outside.

2. 如果要讓屬性可以被外面取用( 賦值 )，那麼在屬性前須加上 @Input() 裝飾器,
代表可接收外面傳進來的參數。

Alias 別名 : @Input( 'alias' ) element ...
傳入時，使用 [alias]=...  , [element] 將失去作用

3. Binding to Custom Events

範例 :
<app-test (serverCreated)="onServerAdded($event)"></app-test>

serverCreated 需要定義在 app-test.component.ts 當中
宣告為 EventEmitter 讓他可以發送事件觸發器，
並且透過 @Output() 屬性讓外面的 Component 接收 ( 讓外面的人知道這裡會有事件發送 )

@OutPut() serverCreated = new EventEmitter<>();  // <> 裡面放要傳入的物件。

onAddServer(){
  this.serverCreated.emit(); // 如果上面有定義要傳出去的物件，這裡就要放進去。
}

Alias 別名 : @OutPut( 'alias' ) serverCreated ...
傳入時，使用 (alias)=...  , (serverCreated) 將失去作用

4. view encapsulation

Angular 透過給予屬性做到不同 component 之間的 css 不會互相影響，
可以在 @Component 新增 encapsulation: ViewEncapsulation.None
停止這個預設行為，這樣 css 的設定就都會吃到。
ViewEncapsulation.Emulated => 預設Angular 實現
ViewEncapsulation.ShadowDom => 只在支援此技術的瀏覽器實現

5.Using Local References in Templates
在 template 給予元素一個暫時的 ref，不必在component 裡面定義。
範例 :
<input type="text" #serverNameInput>
<button (click)="onAddServer(serverNameInput)">Add</button>

6. @ViewChild
不一定要透過事件傳入才能在 component 裡面拿到物件，透過 @ViewChild 裝飾器
在事件觸發之前就可以拿到

範例 :
template
<input type="text" #serverContentInput>

component.ts
@ViewChild('serverContentInput',{static:true}) serverContentInput : ElementRef;

console.log( this.serverContentInput.nativeElement.value );

7. ng-content
如果寫在 <app-xxx>...</app-xxx>裡面，...會不見。
但如果在 app-xxx.component.ts 裡面加上
<ng-content></ng-content> ， 那麼 ... 的內容會出現在 ng-content 的位置。

8. ngOnInit()
lifecycle

9. @ContentChild('...',{static:true})
ng-content 傳進來的東西可以用這個拿到。

app.component.ts :

  <app-server>
    <p #contentP>
      ...
    </p>
  </app-server>

server.component.html :
<ng-content></ng-content>

透過 @ContentChild
server.component.ts 可以拿到 p 的內容。 ( 在 ngOnContentInit 觸發之後 )

service 預習 : 107~111

service 放在 constructor 裡面 讓他自己產生一個。

how to inform Angular how to create ?

1. 在 @Component ({... , providers: [XxxService] })
=> 在元件中提供服務，會限定該服務只能在該元件及其子元件中有效，而同一模組中的其它元件不能訪問它
=> 但子元件中若自己又在 providers 定義相同服務，會創建一個自己的instance ( override )
層級 :
AppModule > AppComponent > other Component

2.直接在 service 上加上 @Injectable 並設定，會把這個類別標記為依賴注入系統的參與者之一
providedIn: 'root' 表示 service 在整個應用程式中都是可見的
就不用每次用到的時候都去寫一次 providers。

範例 :
@Injectable({
  providedIn: 'root',
})
export class xxxService{}

另外如果要注入 service 到 另一個 service ， @Injectable 也是必要的。
( 加在要被注入的那邊 )
ex : 注入 LogService to AccountService, AccountService 需要加上 @Injectable
( 新版的 angular ， 這個屬性變成是必要的，只要是 service 都會有 )

routing 預習 : 123 ~ 127

const appRoutes: Routes = [];

@NgModule imports
 // 加上這個只是可以用 router 相關，但實際註冊是靠後面的 .forRoot
 RouterModule.forRoot(appRoutes)

template :
<router-outlet></router-outlet>

routerLink :
<a routerLink="/recipe">
<a [routerLink]="'/recipe'"> // 接 字串
<a [routerLink]="['/shopping-list']" > // 接 陣列

-----------------------------------------------------------------------------------
20210829 ( 進度 99 )

1. 在同一個元素上只允許"一個"結構式指令

2. custom directives

範例:

@Directive({
  selector: '[appBasic]'
})
export class BasicDirective implements OnInit{
  constructor(elementRef : ElementRef){}

  ngOnInit(){
    this.elementRef.nativeElement.style.backgroundColor = 'green';
  }
}

two things to do :
a. inform Angular that is a new directive ( in app.module.ts : declarations: [ BasicDirective ])
b. <p appBasic> Style with my directive !</p>

但這種直接修改 dom 元素的作法可能會有一些問題，例如在一些執行環境下不允許直接存取dom元素，
可以改用 angular 提供的工具 : Renderer2 來做

constructor(private elRef: ElementRef , private renderer: Renderer2){}

ngOnInit(){
  this.renderer.setStyle(this.elRef.nativeElement, 'background-color', 'blue');
}

3. @HostListener 監聽事件 in directive 例如 : hover 、 mouseover ...

@HostListener('mouseenter') mouseover(eventData: Event){
  // do something...
}

3. @HostBinding 寫在屬性之前，將此屬性跟 dom 元素的屬性綁定

@HostBinding('style.backgroundColor') backgroundColor: string;

func(){
  this.backgroundColor = 'blue';
}

4. 也可以搭配 @Input 使用，做到動態改變的效果。( 父元件傳入 )


form 預習 :

Template-Driven  vs  Reactive

TD : 在 html 寫好，由 angular 轉成需要的形式
R  : 定義在 .ts 檔案 和 html 裡面，連結兩者做到更細微的控制
